#The following program runs the game, battleship. This is a one person game, so the opponent
#is the computer (AI). The AI comes in 3 different modes: Random, Smart, and Cheating.
#This game takes the player's ships and ship coordinates from files and places them on the board.
#Initially, the player will see his/her own board and a covered board for the AI.
#Everytime they guess the spot without a ship, a 'O' will occur, otherwise there's an 'X'.


import random
import sys

def isInt(seed_value):
    '''isInt checks if the input is a number or not.
    It also checks if it's a negative number. This is used to check
    whether the seed value entered is an input or not.'''
    seed_value = seed_value.strip() #removes whitespace
    if seed_value.isdigit(): #only numbers
        return True
    elif seed_value[1:].isdigit() and seed_value[0] == '-': #negative numbers
        return True
    else:
        return False

def seed():
    '''This asks for a seed number. And randomizes to set the seed number'''
    while True:
        try:
            seed = int(input('Enter the seed: ')) #if it's a number
            return random.seed(seed) #set the seed number
        except ValueError: #if not ask again
            pass
#OK
def board_width():
    '''This asks for the width size for the boards. The width must be grater than 0.
    Keep asking until a width number is valid.'''
    widths = input('Enter the width of the board: ')
    while not isInt(widths) == True or not int(widths) > 0:
        widths = input('Enter the width of the board: ')
    return int(widths)

#OK
def board_height():
    '''This asks for the height size for the boards. The width must be grater than 0.
    Keep asking until a height number is valid.'''
    heights = input('Enter the height of the board: ')
    while not isInt(heights) == True or not int(heights) > 0:
        heights = input('Enter the height of the board: ')
    return int(heights)
#OK
def choose_AI():
    '''This shows the menu of different modes of AI you want to play against.
    The choice must be between 1 and 3 and an integer.'''
    while True:
        try:
            print('Choose your AI.')
            print('1. Random')
            print('2. Smart')
            print('3. Cheater')
            choice_AI = int(input(' Your choice: '))
            if choice_AI < 1 or choice_AI > 3:
                continue
            return choice_AI
        except ValueError:
            continue

def bad(line1, line2, line3, line4, name, height, width, ship_names):
    '''This checks the file and the board and see if anything matches up. The ships can't
    be placed out of the board. can't be placed diagonally. Can't have same ship names.
    If any of these happens, the game will end'''
    while name == 'x' or name == 'X' or name == 'o' or name == 'O' or name == '*':
        print('Error: %s is not a valid symbol for a ship. Terminating game.' % name)
        sys.exit(0) #Ships can't be x, o or blanks. Or it will end.
        break
    
    while ship_names.count(name) > 1:  #The user did not choose the same symbol for multiple ships
        print('Error symbol %s is already in use. Terminating game' % name)
        sys.exit(0)
        break#'''

    if int(line2) > int(line4) and int(line2) > width: #The ship is outside the board
        print('Error %s is placed outside of the board. Terminating game.' % name)
        sys.exit(0)

    elif int(line2) < int(line4) and int(line4) > width: #the ship is outside the board
        print('Error %s is placed outside of the board. Terminating game.' % name)
        sys.exit(0)

    elif int(line1) > int(line3) and int(line1) > height: #the ship is outside the board
        print('Error %s is placed outside of the board. Terminating game.' % name)
        sys.exit(0)

    elif int(line1) < int(line3) and int(line3) > height: #the ships is outside the board
        print('Error %s is placed outside of the board. Terminating game.' % name)
        sys.exit(0)

    elif int(line1) != int(line3) and int(line2) != int(line4): #the ship is outside the board
        print('Ships cannot be placed diagonally. Terminating game.')
        sys.exit(0)

    elif int(line1) < 0 or int(line2) < 0 or int(line3) < 0 or int(line4) < 0:
        print('Error %s is placed outside of the board. Terminating game.' % name)
        sys.exit(0) #the ship is outside the board
        

def makemyboards(width, height, compboard, playboard):
    '''This created the base for the player's board and the AI's board. They will be
    in a matrix by width and height length'''
    for i in range(0,height):
        playboard.append(["*"])
        compboard.append(["*"])
        for j in range(0,width-1):
            playboard[i].append("*")
            compboard[i].append("*")

def my_board(playboard, height, width):
    '''Once the base of the board is created, we make it prettier and take it out as
    a string per line.'''
    print(' ', end = ' ')
    print('' * width, end = '')
    for i in range(width):
        print(i, end = ' ')
    print()

    for row_num, row in enumerate(playboard):
        print(row_num, '', end = '')
        for piece in row: #for each element in the board, print it out as a string per row.
            print(piece, end = ' ')
        print()
#OK       
def AI_board(compboard, height, width):
    '''Once the base of the board for the AI is created. The board is made prettier and
    take it out as a string per row.'''
    print(' ', end = ' ')
    print('' * width, end = '')

    for i in range(width):
        print(i, end = ' ')
    print()

    for row_num, row in enumerate(compboard):
        print(row_num, '', end = '')
        for piece in row: #for each element in the computer board, turn it into a string per row.
            print(piece, end = ' ')
        print()

def place_myships(line1, line2, line3, line4, name, playboard, height, width):
    '''This function places the ships from the coordinates in the file. But each coordinate
    must be an integer greater than 0. THe hegiths or widths must match each other.
    THis is the way we'll know it's vertical or horizontal and not diagonal.'''
    if int(line1) >= 0 and int(line2) >= 0 and int(line3) >= 0 and int(line4) >= 0 and not (int(line2) > width or int(line4) > width) and not (int(line1) > height or int(line3) > height):
        if int(line1) == int(line3) and int(line2) < int(line4): #if the 2nd coordinates are greater, then ship placements starts from 1st coordinates until the length of the ship
            for i in range(int(line2),int(line4)+1):
                playboard[int(line1)][i] = name
        elif int(line1) == int(line3) and int(line2) > int(line4):#if the 1st coordinates are greater, then ship placements starts from 2nd coordinates until the length of the ship
            for i in range(int(line4), int(line2)+1):
                playboard[int(line1)][i] = name
        if int(line2) == int(line4) and int(line1) < int(line3):#if the 2nd coordinates are greater, then ship placements starts from 1st coordinates until the length of the ship
            for i in range(int(line1),int(line3)+1):               
                playboard[i][int(line2)] = name
        elif int(line2) == int(line4) and int(line1) > int(line3):#if the 1st coordinates are greater, then ship placements starts from 2nd coordinates until the length of the ship
            for i in range(int(line3), int(line1)+1):
                playboard[i][int(line2)] = name
        if int(line2) == int(line4) and int(line1) == int(line2) and int(line3) == int(line4) and int(line1) == int(line3):
            for i in range(int(line1), int(line3)+1): #if all the coordinates are the same, then the ship only has length 1
                playboard[i][int(line1)] = name

def vert_or_horiz():
    '''randomly choose whether it's vertically or horizontally placed'''
    vh = random.choice(['vert','horiz'])
    return vh


def random_placement_check(ship_size, height, width, compboard, content, AIcoords, AIstart):
    '''This function checks the size of the the ships. Then adds the ship names and size to the dictionary ship_size
    This also randomizes the AI's ships with the same ship names in the file. When there's
    an overlap to other ships, go back again and replace the ship.'''
    for ships in content:
        ships = ships.strip()
        ships = ships.split()
        i = 0
        if ships[2] == ships[4]: #if the column coordinates are the same, we will find the length by
            size = int(ships[3]) - int(ships[1])#subtracting the row coordinates to get the length
            ship_size[ships[0]] = abs(size)+1 #add the length and ship to ship_size
            i+=1
        elif ships[1] == ships[3]:#if the row coordinates are the same, we will find the length by
            size = int(ships[4]) - int(ships[2])#subtracting the column coordinates to get the length
            ship_size[ships[0]] = abs(size)+1#add the length and ship to ship_size
            i+=1

    for ship in sorted(ship_size):
        vh = vert_or_horiz() #randomly choose the orientation of the ships
        if vh == 'vert': #place it vertically
            lengthY = height - int(ship_size[ship]) #to find the last coords ships can be placed
            randY = random.randint(0,lengthY) # randomly choose the the row coordinate
            randX = random.randint(0,width-1) #randomly choose the column coordinate
            vert_placement(randX, randY, ship, ship_size,height, width, compboard, AIcoords, AIstart) #put the ship

        else:
            randY = random.randint(0, height-1) # randomly choose the the row coordinate
            lengthX = width - int(ship_size[ship])#to find the last coords ships can be placed
            randX = random.randint(0, lengthX) #randomly choose the column coordinate
            horiz_placement(randX, randY,ship, ship_size,height, width, compboard, AIcoords, AIstart) #put the ship
    
def horiz_placement(randX, randY,ship, ship_size,height, width, compboard, AIcoords, AIstart):
        '''This checks and places the ship onto the board if it's horizontal orientation'''
        for i in range(randX, randX+int(ship_size[ship])): #for spot on the board to the length of the ship
            while compboard[randY][i] != '*': #if it's not a blank, keep randomizing the coordinate
                lengthX = width - int(ship_size[ship])#to find the last coords ships can be placed
                randY = random.randint(0, height - 1)# randomly choose the the row coordinate
                randX = random.randint(0, lengthX)#randomly choose the column coordinate
            compboard[randY][i] = ship #put the ship on the board
            AIcoords[ship] = (randY,i) #input the ship name and last ship coordinates into AIcoords       
        AIstart[ship] = (randY,randX) #input the ship name and first ship coordinates into AIstart
                        

def vert_placement(randX, randY, ship, ship_size,height, width, compboard, AIcoords, AIstart):
    '''This checks and places the ship onto the board if it's vertical orientation'''
    for j in range(randY, randY+int(ship_size[ship])): #for spot on the board to the length of the ship
        while compboard[j][randX] != '*':#if it's not a blank, keep randomizing the coordinate
            lengthY = height - int(ship_size[ship])#to find the last coords ships can be placed
            randY = random.randint(0, lengthY)# randomly choose the the row coordinate
            randX = random.randint(0, width - 1)#randomly choose the column coordinate
        compboard[j][randX] = ship#put the ship on the board
        AIcoords[ship] = (j,randX) #input the ship name and last ship coordinates into AIcoords       
    AIstart[ship] = (randY,randX)#input the ship name and first ship coordinates into AIstart
                

def ai(compboard, width, height, previous):
    '''Checks if the spot has a ship placemnet of not'''
    for i in range(height):
        for j in range(width):
            if compboard[i][j] == previous:
                return False
    return True

def aiturn(i, j, compboard, board, width, height):
    '''This function checks if the entire ship/ part of  has been shot. '''
    previous = compboard[i][j] #The current element in the AI board
    if not compboard[i][j] == '*' and not compboard[i][j] == 'O': #if it's not a blank, put an X there
        board[i][j] = 'X'
        compboard[i][j] = 'X'
        if ai(compboard, width, height, previous): #if there's a ship placement and everything's shot it sunk myship
            print('You sunk my ' + previous)
        else: # if previous spot wasn't a ship, then it's a hit
            print('Hit!')
        return True
    elif compboard[i][j] == '*': #if it's a blank, then put a O and it's missed
        board[i][j] = 'O'
        compboard[i][j] = 'O'
        print('Miss!')
        return False

def playerturn(compboard, board, width, height,myboard):
    '''This asks the player to input a coords they want to fire. After it's fire, it returns the fired spot on the AI's
    board'''
    while True:
        try:
            shoot = input("Enter row and column to fire on separated by a space: ").split()
            if len(shoot) == 2 and int(shoot[0]) < height and int(shoot[1]) < width:
                if int(shoot[0]) >= 0 and int(shoot[0]) < height and int(shoot[1]) >= 0 and int(shoot[1]) < width and board[int(shoot[0])][int(shoot[1])] != 'O' and board[int(shoot[0])][int(shoot[1])] != 'X':
                    aiturn(int(shoot[0]), int(shoot[1]), compboard, board, width, height) #the coords must be above 0 and less then the size of the board
                    my_win(compboard, height, width, myboard, board) #check if the game is over
                break
        except ValueError:
            continue
    return board

def add_moves(x, y, width, height, future_moves, myboard, locations):
    '''This adds the the coords of the AI's shots and appends it to future_moves to remember what it shot previously'''
    x1, y1 = x, y-1
    x2, y2 = x, y+1
    x3, y3 = x-1, y
    x4, y4 = x+1, y

    if x1 >= 0 and x1 <= (width - 1) and y1 >= 0 and y1 <= (height - 1) and myboard[y1][x1] != 'O' and myboard[y1][x1] != 'X' and  [y1, x1] in locations:
        future_moves.append([x1, y1])

    if x2 >= 0 and x2 <= (width - 1) and y2 >= 0 and y2 <= (height - 1) and myboard[y2][x2] != 'O' and myboard[y2][x2] != 'X' and [y2, x2] in locations:
        future_moves.append([x2, y2])

    if x3 >= 0 and x3 <= (width - 1) and y3 >= 0 and y3 <= (height - 1) and myboard[y3][x3] != 'O' and myboard[y3][x3] != 'X' and  [y3, x3] in locations:
        future_moves.append([x3, y3])

    if x4 >= 0 and x4 <= (width - 1) and y4 >= 0 and y4 <= (height - 1) and myboard[y4][x4] != 'O' and myboard[y4][x4] != 'X' and [y4, x4] in locations:
        future_moves.append([x4, y4])
    return future_moves

def random_AI(myboard, width, height, locations):
    '''This is the random AI mode. It randomly chooses a number that acts as the index of the list locations that are filled
    with all the coordinates from the board not shot at yet.'''
    shoot = locations[random.randint(0, len(locations)-1)] #AI chooses a point to shoot
    print('The AI fires at location (%d, %d)' % (shoot[0], shoot[1])) 
    hit = aiturn(shoot[0], shoot[1], myboard, myboard, width, height) #
    locations.remove(shoot) #takes out the choice of that spot from location so it wont shoot it there again
    return myboard

def smart_AI(myboard, width, height, moves, future_moves, locations):
    '''This is the smart AI mode. It has Hunt and Destroy mode'''
    if len(future_moves) == 0: #if there's no future moves
        shoot = locations[random.randint(0, len(locations)-1)] #randomly choose a locaiton to shoot at
        print('The AI fires at location (%d, %d)' % (shoot[0], shoot[1]))
        hit = aiturn(shoot[0], shoot[1], myboard, myboard, width, height) #shoot at it
        locations.remove(shoot) #remove the choice to shoot it again
        if hit: #if there's a hit
            future_moves = add_moves(shoot[1], shoot[0], width, height, future_moves, myboard, locations) #add the  the moves
        return myboard

def cheating_AI(myboard, width, height):
    '''This is the cheating AI mode. The AI should go through the board row by row firing on all ships
    in one row before
preceding to the next row that contains a ship'''
    shoot = []
    for i in range(0, height):
        for j in range(0, width):
            if myboard[i][j] != '*' and myboard[i][j] != 'X' and myboard[i][j] != 'O': #shoots at spots not shot before
                print('The AI fires at location (%d, %d)' % (i,j))
                hit = aiturn(i, j, myboard, myboard, width, height) #checks if there's a shot or not
                return myboard

def my_win(compboard, height, width, myboard, board):
    '''This function checks if the game is over or not. It determines who the winner is'''
    game_over = True #initialize the gamover
    for i in range(0, height): #the game isnt' over if there's the following thing s in the Ai's board
        for j in range(0, width):
            if compboard[i][j] != '*' and compboard[i][j] != 'X' and compboard[i][j] != 'O':
                game_over = False
                
    if game_over == True: #if it's over, I win
        print('Scanning Board')
        AI_board(board, height, width)
        print()
        print('My Board')
        my_board(myboard, height, width)
        print()
        print('You win!')
        print()
        sys.exit(0)

    game_over = True#initialize the gamover
    for i in range(0, height):#the game isnt' over if there's the following thing s in the player's board
        for j in range(0, width):
            if myboard[i][j] != '*' and myboard[i][j] != 'X' and myboard[i][j] != 'O':
                game_over = False
                
    if game_over == True: #if it's over AI wins
        print('Scanning Board')
        AI_board(board, height, width)
        print()
        print('My Board')
        my_board(myboard, height, width)
        print()
        print('The AI wins.')
        sys.exit(0)

    return game_over



def main():
    '''This function runs everything on the board. It plays the battlship game'''
    set_seed = seed() #set the seed
    width = board_width() #determin width of board
    height = board_height() #determine height of board
    file = input('Enter the name of the file containing your ship placements: ') #choose file to open
    file = file.strip()
    
    ship_names = [] # for list of ship names
    myboard = [] #for player's board in matrix
    compboard = [] #for Ai's board in matrix
    
    AIcoords = {} #for AI's last coordinates and ship names
    AIstart = {} #for AI's first coordinates and ship names
    
    ship_size = {} #for ship names and the length of the ships

    with open(file) as f: #open the file
        content = f.readlines() #read the file line by line
        content = sorted(content)
        AI_mode = choose_AI() #print the menu to choose your AI opponent

        makemyboards(width, height, compboard, myboard) #append the blank boards
        
        for line in content:
            line = line.strip()
            line = line.split()
            ship_names.append(line[0]) #add all the names of the list ship_names
            bad(line[1], line[2], line[3], line[4], line[0], height, width, ship_names) #check if the coordinates and ships in file are accurate
            place_myships(line[1], line[2], line[3], line[4], line[0], myboard, height, width) #put my ships onto my board based on the coordinates

        
        if AI_mode == 1 or AI_mode == 2: #if it's random or Smart AI
            locations = [] #then we'll append a list of tuples containing all possible points to shoot at
            for i in range(0, height):
                for j in range(0, width):
                    locations.append([i,j])

        random_placement_check(ship_size, height, width, compboard, content, AIcoords, AIstart) #randomly put the ships onto AI's board
        
        for ship in ship_names: #based on the name of the ship, AI will put the ships alphabetically
            ship_names = sorted(ship_names)
            print('Placing ship from %d,%d to %d,%d.' % (AIstart[ship][0], AIstart[ship][1], AIcoords[ship][0], AIcoords[ship][1]))

        board = [] #a new blank board is made to show as the scanning board for the player. 
        for i in range(0, height): #this will be matched with compboard
            board.append([])
            for j in range(0, width):
                board[i].append('*')

        gameover = False #initialize gameover to be false

        turn = random.randint(0,1) #0 is player, 1 is AI's turn

        if turn == 0: #if player goes first, the boards will be printed first
            print('Scanning Board')
            AI_board(board, height, width)
            print()
            print('My Board')
            my_board(myboard, height, width)
            print()
            
        moves = [] 
        future_moves = []
        
        while not gameover: #keep playing if the game isn't over yet
            if turn == 0: #if player goes first
                
                game_over = True #check if the player won or not
                for i in range(0, height):
                    for j in range(0, width):
                        try:
                            if compboard[i][j] != '*' and compboard[i][j] != 'X' and compboard[i][j] != 'O':
                                game_over = False
                        except TypeError:
                            game_over == False

                if game_over == True:
                    print('You win!')
                    sys.exit(0)

                #since the boards won't be printed again, this gamover check is separate from my_win
                game_over = True #check if the AI won or not
                for i in range(0, height):
                    for j in range(0, width):
                        try:
                            if myboard[i][j] != '*' and myboard[i][j] != 'X' and myboard[i][j] != 'O':
                                game_over = False
                        except TypeError:
                            game_over == False
                if game_over == True:
                    print('The AI wins.')
                    break

                game_over = True #this checks if player has won
                for i in range(0, height):
                    for j in range(0, width):
                        try:
                            if compboard[i][j] != '*' and compboard[i][j] != 'X' and compboard[i][j] != 'O':
                                game_over = False
                        except TypeError:
                            game_over == False

                if game_over == True:
                    print('Scanning Board')
                    AI_board(board, height, width)
                    print()
                    print('My Board')
                    my_board(myboard, height, width)
                    print()
                    print('You win!')
                    print()
                    break

                playerturn(compboard, board, width, height, myboard) #if no one won yet, keep player and shoot at the AI's board


                if turn == 0: #if the randomized turn is player 1, then the next player will be player 2
                    turn = turn + 1
                elif turn == 1: #if the randomized turn in player 2, then the next player will be player 1
                    turn = turn - 1

        
            elif turn == 1: #if it's AI's turn
                
                if AI_mode == 3: #if cheating AI was chosem
                    myboard = cheating_AI(myboard, width, height)
                elif AI_mode == 1: #if random AI was chose
                    myboard = random_AI(myboard, width, height, locations)
                elif AI_mode == 2: #if Smarter AI was chosen
                    myboard = smart_AI(myboard, width, height, moves, future_moves, locations)

                my_win(compboard, height, width, myboard, board) #check if anyone has won
            
                print('Scanning Board') #print the boards for the next player to scan
                AI_board(board, height, width)
                print()
                print('My Board')
                my_board(myboard, height, width)
                print()

                playerturn(compboard, board, width, height,myboard) #shoot at the player's board



        if turn == 0: #if the randomized turn is player 1, then the next player will be player 2
            turn = turn + 1
        elif turn == 1: #if the randomized turn in player 2, then the next player will be player 1
            turn = turn - 1



main()
